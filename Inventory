package c482.Model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/** Inventory class provides the data and models an inventory of products and parts.**/
public class Inventory {
    private static ObservableList<Part> allParts = FXCollections.observableArrayList();
    private static ObservableList<Product> allProducts = FXCollections.observableArrayList();

    /**Adds parts to the inventory. **/
    public static void addPart(Part newPart){
        allParts.add(newPart);
    }

    /**Adds products to the inventory. **/
    public static void addProduct(Product newProduct){
        allProducts.add(newProduct);
    }

    /**Searches the list of parts by name. **/
    public static Part lookupPart(int partID) {
        Part temp = null;
        for (Part part : allParts){
            if (partID == part.getId()){
                temp = part;
            }
        }
        return temp;
    }

    /**Searches the list of products by id. **/
    public static Product lookupProduct(int productID) {
        Product temp = null;
        for (Product products : allProducts){
            if (productID == products.getId()){
                temp = products;
            }
        }
        return temp;
    }

    /**Searches the list of parts by name. **/
    public static ObservableList<Part> lookupPart(String searchPartName){
        ObservableList<Part> foundParts = FXCollections.observableArrayList();

        if(searchPartName.length() == 0) {
            foundParts = allParts;
        }
        else {
            for (int i = 0; i < allParts.size(); i++) {
                if (allParts.get(i).getName().toLowerCase().contains(searchPartName.toLowerCase())) {
                    foundParts.add(allParts.get(i));
                }
            }
        }

        return foundParts;
    }

    /**Searches the list of products by name. **/
    public static ObservableList lookupProduct(String searchProductName){
        ObservableList<Product> foundProducts = FXCollections.observableArrayList();

        if(searchProductName.length() == 0) {
            foundProducts = allProducts;
        }
        else {
            for (int i = 0; i < allProducts.size(); i++) {
                if (allProducts.get(i).getName().toLowerCase().contains(searchProductName.toLowerCase())) {
                    foundProducts.add(allProducts.get(i));
                }
            }
        }

        return foundProducts;
    }

    /**Replaces Part from the listed parts. **/

    public static void updatePart(int index, Part selectedPart){
        allParts.set(index, selectedPart);
    }

    /**Replaces Product from the listed Products. **/

    public static void updateProduct(int index, Product newProduct){
        allProducts.set(index, newProduct);
    }

    /**Gets rid of a part from the listed parts. **/
    public static boolean deletePart(Part selectedPart){
        return allParts.remove(selectedPart);
    }

    /**Gets rid of a product from the listed parts. **/

    public static boolean deleteProduct(Product selectedProduct){
        if(selectedProduct.getAllAssociatedParts().isEmpty()) {
            return allProducts.remove(selectedProduct);

        }
         return false;
    }

/**Gets a list of all the parts in the inventory**/

    public static ObservableList<Part> getAllParts() {
        return allParts;
    }

    /**Gets a list of all the products in the inventory**/
    public static ObservableList<Product> getAllProducts() {
        return allProducts;
    }


}
